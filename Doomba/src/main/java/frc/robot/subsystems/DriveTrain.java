// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANError;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/** program thats runs tankdrive
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANSparkMax frontLeftController;
    private CANSparkMax backLeftController;
    private SpeedControllerGroup leftMotors;
    private CANSparkMax frontRightController;
    private CANSparkMax backRightController;
    private SpeedControllerGroup rightMotors;
    private DifferentialDrive differentialDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        frontLeftController = new CANSparkMax(2, MotorType.kBrushless);

        frontLeftController.restoreFactoryDefaults();  
        frontLeftController.setInverted(false);
        frontLeftController.setIdleMode(IdleMode.kCoast);
        
                
        backLeftController = new CANSparkMax(3, MotorType.kBrushless);

        backLeftController.restoreFactoryDefaults();  
        backLeftController.setInverted(false);
        backLeftController.setIdleMode(IdleMode.kCoast);
        
                
        leftMotors = new SpeedControllerGroup(frontLeftController, backLeftController  );
        addChild("LeftMotors",leftMotors);

                
        frontRightController = new CANSparkMax(5, MotorType.kBrushless);

        frontRightController.restoreFactoryDefaults();  
        frontRightController.setInverted(false);
        frontRightController.setIdleMode(IdleMode.kCoast);
        
                
        backRightController = new CANSparkMax(4, MotorType.kBrushless);

        backRightController.restoreFactoryDefaults();  
        backRightController.setInverted(false);
        backRightController.setIdleMode(IdleMode.kCoast);
        
                
        rightMotors = new SpeedControllerGroup(frontRightController, backRightController  );
        addChild("RightMotors",rightMotors);

                
        differentialDrive1 = new DifferentialDrive(leftMotors, rightMotors);
        addChild("Differential Drive 1",differentialDrive1);
        differentialDrive1.setSafetyEnabled(true);
        differentialDrive1.setExpiration(0.1);
        differentialDrive1.setMaxOutput(1.0);

                

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TeleopDrive());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    /**
     * It uses differential drive, tank drive method to drive the robot
     * @param leftSpeed speed of the left set of wheels
     * @param rightSpeed speed of the right set of wheels
     */
    public void drive(double leftSpeed, double rightSpeed) {
        differentialDrive1.tankDrive(leftSpeed * -0.7, rightSpeed * -0.7);
    }
}


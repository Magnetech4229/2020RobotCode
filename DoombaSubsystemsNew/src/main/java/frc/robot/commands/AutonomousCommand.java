// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.Robot;

/**
 * 
 */
public class AutonomousCommand extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    //One encoder tick is about 5.485 centimeters
    private double leftEncoderStartPos;
    private double rightEncoderStartPos;

    private double averageCurrentLeftEncoderPosition;
    private double averageCurrentRightEncoderPosition;

    private double leftPower;
    private double rightPower;

    private double leftEncoderTargetPos = 40; 
    private double rightEncoderTargetPos = 40;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonomousCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    /**
     * 
     */
    @Override
    protected void initialize() {
        leftEncoderStartPos = (Robot.driveTrain.frontLeftEncoder.getPosition() + 
            Robot.driveTrain.backLeftEncoder.getPosition()) / 2;
        rightEncoderStartPos = (Robot.driveTrain.frontRightEncoder.getPosition() + 
            Robot.driveTrain.backRightEncoder.getPosition() / 2);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        averageCurrentLeftEncoderPosition = (Robot.driveTrain.frontLeftEncoder.getPosition() + 
            Robot.driveTrain.backLeftEncoder.getPosition()) / 2;
        averageCurrentRightEncoderPosition = (Robot.driveTrain.frontRightEncoder.getPosition() + 
            Robot.driveTrain.backRightEncoder.getPosition() / 2);
        
        if (averageCurrentLeftEncoderPosition < leftEncoderTargetPos) {
            leftPower = 0.5;
        } else if (averageCurrentLeftEncoderPosition > leftEncoderTargetPos) {
            leftPower = -0.5;
        } else {
            leftPower = 0;
        }

        if (averageCurrentRightEncoderPosition < rightEncoderTargetPos) {
            rightPower = 0.5;
        } else if (averageCurrentRightEncoderPosition > rightEncoderTargetPos) {
            rightPower = -0.5;
        } else {
            rightPower = 0;
        }

        Robot.driveTrain.drive(leftPower, rightPower);

        SmartDashboard.putNumber("Left Motor Power", leftPower);
        SmartDashboard.putNumber("Right Motor Power", rightPower);
    }

    // Make this return true when this Command no longer needs to run execute()
    /**
     * Returns true when command is done - when robot has reached target position
     * @return true when encoder position matches target position
     */
    @Override
    protected boolean isFinished() {
        if ((averageCurrentLeftEncoderPosition == leftEncoderTargetPos) && (averageCurrentRightEncoderPosition == rightEncoderTargetPos)) {
            Robot.driveTrain.drive(0, 0);
            return true;
        }

        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.driveTrain.drive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
